//Segue os dois codigos utilizados, tal que pela funcao clock e perceptivel uma diferenca minima no tempo de execucao entre os codigos, determinando eficiecia similar para ambos

/*#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int comparador(const void *a, const void *b) {
  return ( *(int*)a - *(int*)b );
}

void arrange (float *pont,int elem,int(*comparador)(float *a, float *b))
{
  float aux;
  for(int i = 0 ; i < elem ; i++){
    for(int j = i ; j < elem; j++){
      if (comparador((pont + i) ,(pont + j))>0){
        aux = *(pont + i);
        *(pont + i) = *(pont + j);
        *(pont + j) = aux;
        }
      }
    }
   printf("Ordenando os elementos, tem-se:\n");
  for (int i = 0 ; i < elem ; i++)
    printf("%g\n",*(pont + i));
}

int main(void) 
{
  clock_t timer;
  timer = clock();
  int i = 0, j = 0, n = 3, aux; // n = quantidade de elementos
  printf("Quantos elementos serao ordenadados? ");
  scanf("%d",&n);
  float *x;

  x = malloc(n*sizeof(float));
  
  for(i = 0 ; i < n ; i++){
    printf("\nDigite o %dº numero - ",i+1);
    scanf("%f",&x[i]);
  }
  arrange(x, n, comparador);
  
  free(x);
  timer = clock() - timer;
  printf("\n%f segundos para executar o programa\n",((float)timer)/CLOCKS_PER_SEC);
  return 0;
}*/

/*#include <stdio.h>
#include <stdlib.h>
#include <time.h>

  int comparador(const void *a, const void *b) {
  return ( *(int*)a - *(int*)b );
}
 
int main () {
  clock_t timer;
  timer = clock();
  int i, n; //n = numero de elementos
  printf("Quantos elementos serao ordenadados? ");
  scanf("%d",&n);
   float *x;
  x = malloc(n*sizeof(float));

for(i = 0 ; i < n ; i++){
    printf("\nDigite o %dº numero - ",i+1);
    scanf("%f",&x[i]);
  }
 
   //ordena o array
   qsort(x, n, sizeof(float),comparador);
 
   //mostra os valores do array
   for( i = 0 ; i < n; i++ ) {
      printf("%g ", x[i]);
   }

  free(x);
  timer = clock() - timer;
  printf("\n%f segundos para executar o programa\n",((float)timer)/CLOCKS_PER_SEC);
  
   return(0);
}*/
